// Jenkinsfile-CD (function-style, used inside main Jenkinsfile)
def runCD() {
    def NODE_IP       = "13.233.21.199"     // Your EC2 public IP
    def EC2_USER      = "ec2-user"          // Default Amazon Linux user
    def PIPELINE_NAME = "CI-CD-Pipeline"    // Jenkins job name
    def PROJECT_NAME  = "DevopsProject1"    // Your repo/project folder

    stage("1. Copy Kubernetes Files to EC2") {
        sshagent(['my_ec2_creds']) {   // Jenkins credentials ID (private key)
            sh """
                scp -o StrictHostKeyChecking=no \
                    /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/deployment.yaml \
                    ${EC2_USER}@${NODE_IP}:/home/${EC2_USER}/

                scp -o StrictHostKeyChecking=no \
                    /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/service.yaml \
                    ${EC2_USER}@${NODE_IP}:/home/${EC2_USER}/
            """
        }
    }

    stage("2. Manual Approval") {
        input message: "Approve deployment to Kubernetes?"
    }

    stage("3. Deploy to Kubernetes") {
        sshagent(['my_ec2_creds']) {
            sh """
                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${NODE_IP} kubectl apply -f /home/${EC2_USER}/deployment.yaml
                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${NODE_IP} kubectl apply -f /home/${EC2_USER}/service.yaml
                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${NODE_IP} kubectl rollout restart deployment mydeploy
                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${NODE_IP} kubectl get svc -o wide
            """
        }
    }
}

return this
