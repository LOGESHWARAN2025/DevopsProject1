// Jenkinsfile-CI (function-style for master pipeline)
def runCI() {

    // DockerHub username & repository
    env.DOCKER_USERNAME = "logeshwaran2025"
    def DOCKER_REPO = "ci-cd-pipelines"

    stage("1. Cleanup") {
        deleteDir()
    }

    stage('2. Git Checkout') {
        dir("DevopsProject1") {
            script {
                git branch: 'main', url: 'https://github.com/LOGESHWARAN2025/DevopsProject1.git'
            }
        }
    }

    stage("3. Maven Unit Test") {
        dir("DevopsProject1") {
            sh 'mvn test'
        }
    }

    stage('4. Maven Build') {
        dir("DevopsProject1") {
            sh 'mvn clean install'
        }
    }

    stage("5. Maven Integration Test") {
        dir("DevopsProject1") {
            sh 'mvn verify'
        }
    }

    stage('6. Docker Image Build') {
        dir('DevopsProject1') {
            sh "docker build -t ${DOCKER_REPO}:${BUILD_NUMBER} ."
        }
    }

    stage('7. Docker Image Tag') {
        sh """
            docker tag ${DOCKER_REPO}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${DOCKER_REPO}:v${BUILD_NUMBER}
            docker tag ${DOCKER_REPO}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${DOCKER_REPO}:latest
        """
    }

    stage('8. Trivy Image Scan') {
        // Optional Trivy scan
        sh """
            # trivy image ${DOCKER_USERNAME}/${DOCKER_REPO}:v${BUILD_NUMBER} > scan.txt || true
        """
    }

    stage('9. Docker Image Push') {
        withCredentials([usernamePassword(credentialsId: 'docker-credentials',
                                         usernameVariable: 'DOCKER_USER',
                                         passwordVariable: 'DOCKER_PASS')]) {
            sh """
                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                docker push ${DOCKER_USERNAME}/${DOCKER_REPO}:v${BUILD_NUMBER}
                docker push ${DOCKER_USERNAME}/${DOCKER_REPO}:latest
            """
        }
    }

    stage('10. Docker Image Cleanup') {
        sh "docker image prune -af"
    }
}

return this
